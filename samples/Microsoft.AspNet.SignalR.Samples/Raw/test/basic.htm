<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <title>SignalR Raw Connection Sample</title>
    <style type="text/css">
        body {
            font-family: "Segoe UI";
            font-size: 12px;
        }
        form {
            margin-bottom: 10px;
            display: block;
        }
        label {
            display: block;
        }
    </style>
    <link rel="Stylesheet" href="http://code.jquery.com/qunit/qunit-git.css" />
    <script src="../../Scripts/signalr.samples.js" type="text/javascript"></script>
    <script src="../../Scripts/jquery-1.6.4.min.js"></script>
    <script src="../../Scripts/jquery.cookie.js" type="text/javascript"></script>
    <script src="../../Scripts/json2.min.js" type="text/javascript"></script>
    <script src="../../Scripts/jquery.signalR.js"></script>
    <script type="text/javascript" src="http://code.jquery.com/qunit/qunit-git.js"></script>
    <script>
        $(function () {
            "use strict";

            module('connetions');

            asyncTest('start', function () {
                expect(4);

                var connection = $.connection('../../test-connection');

                connection.stateChanged(function (change) {
                    if (change.oldState === $.signalR.connectionState.disconnected) {
                        equal(change.newState, $.signalR.connectionState.connecting, 'Transitioned from disconnected to connecting');
                    }
                    if (change.oldState === $.signalR.connectionState.connecting) {
                        equal(change.newState, $.signalR.connectionState.connected, 'Transitioned from connecting to connected');
                    }
                });

                connection.reconnected(function () {
                    ok(false, 'Reconnect should not be fired');
                });

                connection.disconnected(function () {
                    ok(true, 'Disconnected');
                });

                connection.start({ transport: activeTransport }).done(function () {
                    start();
                    equal(connection.state, $.signalR.connectionState.connected, 'Connection state is connected in start');
                    connection.stop();
                });
            });

            asyncTest('failed start', function () {
                expect(2);

                var connection = $.connection('../../FakeUrl');

                connection.error(function (err) {
                    ok(err !== null, 'Error event: Failed to connect to ' + connection.url);
                });

                connection.reconnected(function () {
                    ok(false, 'Reconnect should not be fired');
                });

                connection.start({ transport: activeTransport }).fail(function (err) {
                    start();
                    ok(err !== null, 'Deferred start: Failed to connect to ' + connection.url);
                });
            });

            test('send without start', function () {
                var connection = $.connection('../../test-connection');

                raises(function () {
                    connection.send('hello world');
                },
                'SignalR: Connection must be started before data can be sent. Call .start() before .send()',
                'Exception thrown when sending without starting');

            });

            asyncTest('received event', function () {
                var connection = $.connection('../../test-connection', null, true);

                connection.reconnected(function () {
                    ok(false, 'Reconnect should not be fired. Connection id ' + connection.id);
                });

                connection.received(function (message) {
                    start();
                    equal(message, 'this is a test', 'Message received');
                });

                connection.start({ transport: activeTransport }).done(function () {
                    connection.send('this is a test');
                });
            });
        });
    </script>
</head>
<body>
    <h1 id="qunit-header">
        QUnit example</h1>
    <h2 id="qunit-banner">
    </h2>
    <div id="qunit-testrunner-toolbar">
    </div>
    <h2 id="qunit-userAgent">
    </h2>
    <ol id="qunit-tests">
    </ol>
    <div id="qunit-fixture">
        test markup, will be hidden</div>
</body>
</html>
