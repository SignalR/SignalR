//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18213
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.AspNet.SignalR.ServiceBus {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.AspNet.SignalR.ServiceBus.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} must be a non-negative timeout value. The provided value was {1}..
        /// </summary>
        internal static string Error_ArgumentMustBeNonNegativeTimeoutVal {
            get {
                return ResourceManager.GetString("Error_ArgumentMustBeNonNegativeTimeoutVal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} must be a positive timeout value. The provided value was {1}.
        /// </summary>
        internal static string Error_ArgumentMustBePositiveTimeoutVal {
            get {
                return ResourceManager.GetString("Error_ArgumentMustBePositiveTimeoutVal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An AsyncCallback threw an exception..
        /// </summary>
        internal static string Error_AsyncCallbackThrewException {
            get {
                return ResourceManager.GetString("Error_AsyncCallbackThrewException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The message cannot be published as the specified topic client has been closed..
        /// </summary>
        internal static string Error_CannotPublishClientClosed {
            get {
                return ResourceManager.GetString("Error_CannotPublishClientClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cleanup called on an overlapped that is in-flight..
        /// </summary>
        internal static string Error_CleanupCalledOnAnOverlappedThatsInFlight {
            get {
                return ResourceManager.GetString("Error_CleanupCalledOnAnOverlappedThatsInFlight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data size is smaller than -1.
        /// </summary>
        internal static string Error_DataSizeSmallerThanNegOne {
            get {
                return ResourceManager.GetString("Error_DataSizeSmallerThanNegOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data size is too big..
        /// </summary>
        internal static string Error_DataSizeTooBig {
            get {
                return ResourceManager.GetString("Error_DataSizeTooBig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Dequeue operation timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout..
        /// </summary>
        internal static string Error_DequeueOperationTimedOut {
            get {
                return ResourceManager.GetString("Error_DequeueOperationTimedOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End cannot be called twice on the same AsyncResult..
        /// </summary>
        internal static string Error_EndCannotBeCalledTwiceOnSameAsyncResult {
            get {
                return ResourceManager.GetString("Error_EndCannotBeCalledTwiceOnSameAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Head/Tail overflow!.
        /// </summary>
        internal static string Error_HeadTailOverflow {
            get {
                return ResourceManager.GetString("Error_HeadTailOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect IAsyncResult was provided to an &apos;End&apos; method. The IAsyncResult object passed to &apos;End&apos; must be the one returned from the matching &apos;Begin&apos; or passed to the callback provided to &apos;Begin&apos;..
        /// </summary>
        internal static string Error_IncorrectIAsyncResultProvidedToEndMethod {
            get {
                return ResourceManager.GetString("Error_IncorrectIAsyncResultProvidedToEndMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect implementation of the IAsyncResult interface. {0}.
        /// </summary>
        internal static string Error_IncorrectImplOfIAsyncResult {
            get {
                return ResourceManager.GetString("Error_IncorrectImplOfIAsyncResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An incorrect implementation of the IAsyncResult interface ({0}) may be returning incorrect values 
        ///from the CompletedSynchronously property or calling the AsyncCallback more than once..
        /// </summary>
        internal static string Error_IncorrectImplOfIAsyncResultReturningBadValues {
            get {
                return ResourceManager.GetString("Error_IncorrectImplOfIAsyncResultReturningBadValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IOThreadTimer cannot accept Timespan.MaxValue..
        /// </summary>
        internal static string Error_IOThreadTimerCannotAcceptTimeSpanMaxVal {
            get {
                return ResourceManager.GetString("Error_IOThreadTimerCannotAcceptTimeSpanMaxVal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Low-priority Head/Tail overflow!.
        /// </summary>
        internal static string Error_LowPriorityHeadTailOverflow {
            get {
                return ResourceManager.GetString("Error_LowPriorityHeadTailOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Malformed data stream..
        /// </summary>
        internal static string Error_MalformedDataStream {
            get {
                return ResourceManager.GetString("Error_MalformedDataStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IAsyncResult implementation &apos;{0}&apos; tried to complete a single operation multiple times. 
        ///This could be caused by an incorrect application IAsyncResult implementation or 
        ///other extensibility code, such as an IAsyncResult that returns incorrect CompletedSynchronously 
        ///values or invokes the AsyncCallback multiple times..
        /// </summary>
        internal static string Error_MultipleOperationException {
            get {
                return ResourceManager.GetString("Error_MultipleOperationException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only call Check/SyncContinue once per async operation (once per PrepareAsyncCompletion)..
        /// </summary>
        internal static string Error_OnlyOnceChecOrSyncPerOperation {
            get {
                return ResourceManager.GetString("Error_OnlyOnceChecOrSyncPerOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Semaphore&apos;s count has already reached zero before this operation. Make sure Exit() is called only after successfully entered the semaphore.
        /// </summary>
        internal static string Error_SemaphoreCountAlreadyReachedZero {
            get {
                return ResourceManager.GetString("Error_SemaphoreCountAlreadyReachedZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to resolve the instance index of this role. Make sure Microsoft.WindowsAzure.ServiceRuntime.dll is deployed with your application..
        /// </summary>
        internal static string Error_UnableToResolveIncaseIndexOfRole {
            get {
                return ResourceManager.GetString("Error_UnableToResolveIncaseIndexOfRole", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value supplied must be between {0} and {1}..
        /// </summary>
        internal static string Error_ValueSuppliedMustBeBetween {
            get {
                return ResourceManager.GetString("Error_ValueSuppliedMustBeBetween", resourceCulture);
            }
        }
    }
}
