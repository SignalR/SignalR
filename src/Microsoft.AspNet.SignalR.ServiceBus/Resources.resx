<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error_ArgumentMustBeNonNegativeTimeoutVal" xml:space="preserve">
    <value>Argument {0} must be a non-negative timeout value. The provided value was {1}.</value>
  </data>
  <data name="Error_ArgumentMustBePositiveTimeoutVal" xml:space="preserve">
    <value>Argument {0} must be a positive timeout value. The provided value was {1}</value>
  </data>
  <data name="Error_AsyncCallbackThrewException" xml:space="preserve">
    <value>An AsyncCallback threw an exception.</value>
  </data>
  <data name="Error_CleanupCalledOnAnOverlappedThatsInFlight" xml:space="preserve">
    <value>Cleanup called on an overlapped that is in-flight.</value>
  </data>
  <data name="Error_DataSizeSmallerThanNegOne" xml:space="preserve">
    <value>Data size is smaller than -1</value>
  </data>
  <data name="Error_DataSizeTooBig" xml:space="preserve">
    <value>Data size is too big.</value>
  </data>
  <data name="Error_DequeueOperationTimedOut" xml:space="preserve">
    <value>A Dequeue operation timed out after {0}. The time allotted to this operation may have been a portion of a longer timeout.</value>
  </data>
  <data name="Error_EndCannotBeCalledTwiceOnSameAsyncResult" xml:space="preserve">
    <value>End cannot be called twice on the same AsyncResult.</value>
  </data>
  <data name="Error_HeadTailOverflow" xml:space="preserve">
    <value>Head/Tail overflow!</value>
  </data>
  <data name="Error_IncorrectIAsyncResultProvidedToEndMethod" xml:space="preserve">
    <value>An incorrect IAsyncResult was provided to an 'End' method. The IAsyncResult object passed to 'End' must be the one returned from the matching 'Begin' or passed to the callback provided to 'Begin'.</value>
  </data>
  <data name="Error_IncorrectImplOfIAsyncResult" xml:space="preserve">
    <value>An incorrect implementation of the IAsyncResult interface. {0}</value>
  </data>
  <data name="Error_IncorrectImplOfIAsyncResultReturningBadValues" xml:space="preserve">
    <value>An incorrect implementation of the IAsyncResult interface ({0}) may be returning incorrect values 
from the CompletedSynchronously property or calling the AsyncCallback more than once.</value>
  </data>
  <data name="Error_IOThreadTimerCannotAcceptTimeSpanMaxVal" xml:space="preserve">
    <value>IOThreadTimer cannot accept Timespan.MaxValue.</value>
  </data>
  <data name="Error_LowPriorityHeadTailOverflow" xml:space="preserve">
    <value>Low-priority Head/Tail overflow!</value>
  </data>
  <data name="Error_MalformedDataStream" xml:space="preserve">
    <value>Malformed data stream.</value>
  </data>
  <data name="Error_MultipleOperationException" xml:space="preserve">
    <value>The IAsyncResult implementation '{0}' tried to complete a single operation multiple times. 
This could be caused by an incorrect application IAsyncResult implementation or 
other extensibility code, such as an IAsyncResult that returns incorrect CompletedSynchronously 
values or invokes the AsyncCallback multiple times.</value>
  </data>
  <data name="Error_OnlyOnceChecOrSyncPerOperation" xml:space="preserve">
    <value>Only call Check/SyncContinue once per async operation (once per PrepareAsyncCompletion).</value>
  </data>
  <data name="Error_SemaphoreCountAlreadyReachedZero" xml:space="preserve">
    <value>Semaphore's count has already reached zero before this operation. Make sure Exit() is called only after successfully entered the semaphore</value>
  </data>
  <data name="Error_UnableToResolveIncaseIndexOfRole" xml:space="preserve">
    <value>Unable to resolve the instance index of this role. Make sure Microsoft.WindowsAzure.ServiceRuntime.dll is deployed with your application.</value>
  </data>
  <data name="Error_ValueSuppliedMustBeBetween" xml:space="preserve">
    <value>The value supplied must be between {0} and {1}.</value>
  </data>
  <data name="Error_CannotPublishClientClosed" xml:space="preserve">
    <value>The message cannot be published as the specified topic client has been closed.</value>
  </data>
</root>