<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Go" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildProjectDirectory)\Build.tasks" />
  <Import Project="$(MSBuildProjectDirectory)\Microsoft.AspNet.SignalR.versions.targets" />

  <PropertyGroup>
    <Configuration Condition="$(Configuration) == ''">Debug</Configuration>
    <ProjectRoot>$(MSBuildProjectDirectory)\..</ProjectRoot>
    <ArtifactsDir>$(ProjectRoot)\artifacts\$(Configuration)</ArtifactsDir>
    <ProjectArtifactsDir>$(ArtifactsDir)\projects</ProjectArtifactsDir>
    <JSTestsPath>$(ProjectArtifactsDir)\JsTestHarness</JSTestsPath>
    <PackageSrcDir>$(ArtifactsDir)\package-src</PackageSrcDir>
    <FxCopDir>$(ArtifactsDir)\fxcop</FxCopDir>
    <SamplesDir>$(ArtifactsDir)\samples</SamplesDir>
    <NuspecsSource>$(ProjectRoot)\nuspecs</NuspecsSource>
    <NuspecsDestination>$(ArtifactsDir)\nuspecs</NuspecsDestination>
    <TestResultsPath>$(ArtifactsDir)\TestResults</TestResultsPath>
    <DocsPath>$(ArtifactsDir)\docs</DocsPath>
    <NuGetToolsPath>$(ProjectRoot)\.nuget</NuGetToolsPath>
    <NuGetExePath>$(NuGetToolsPath)\nuget.exe</NuGetExePath>
    <ToolsPath>$(ProjectRoot)\tools\</ToolsPath>
    <XunitPath>$(ToolsPath)xunit\</XunitPath>
    <ChutzpahExe>chutzpah.console.exe</ChutzpahExe>
    <ChutzpahPath>$(ProjectRoot)\tools\chutzpah</ChutzpahPath>
    <ChutzpahExePath>$(ChutzpahPath)\$(ChutzpahExe)</ChutzpahExePath>
    <JSTestsURL>http://localhost:1337/</JSTestsURL>
    <JSTester>$(JSTestsPath)\default.html</JSTester>
    <DocuExePath>$(ToolsPath)docu\docu.exe</DocuExePath>
    <ZipExe>$(ToolsPath)7za920\7za.exe</ZipExe>
    <KeyFile Condition="'$(KeyFile)' == ''">$(ProjectRoot)\35MSSharedLib1024.snk</KeyFile>
    <MSBuildCommunityTasksPath>$(MSBuildProjectDirectory)</MSBuildCommunityTasksPath>
  </PropertyGroup>

  <Import Project="$(MSBuildProjectDirectory)\MSBuild.Community.Tasks.Targets" />

  <!-- Add extra properties to the build for signing -->
  <PropertyGroup Condition="Exists('$(KeyFile)')">
    <ExtraProperties>KeyFile=$(KeyFile)</ExtraProperties>
  </PropertyGroup>

  <PropertyGroup>
    <PrereleaseTagWithSeparator Condition="$(BuildQuality) != ''">-$(BuildQuality)</PrereleaseTagWithSeparator>
    <AssemblyVersion>$(MajorVersion).$(MinorVersion).0</AssemblyVersion>
    <PackageVersion>$(MajorVersion).$(MinorVersion).$(PatchVersion)$(PrereleaseTagWithSeparator)</PackageVersion>
  </PropertyGroup>

  <PropertyGroup>
    <Silverlight5SDKInstalled Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\Silverlight\v5.0\Microsoft.Silverlight.CSharp.targets')">true</Silverlight5SDKInstalled>
    <Silverlight5SDKInstalled Condition="!Exists('$(MSBuildExtensionsPath)\Microsoft\Silverlight\v5.0\Microsoft.Silverlight.CSharp.targets')">false</Silverlight5SDKInstalled>
    <WP8SDKInstalled Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsPhone\v8.0\Microsoft.WindowsPhone.v8.0.Overrides.targets')">true</WP8SDKInstalled>
    <WP8SDKInstalled Condition="!Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsPhone\v8.0\Microsoft.WindowsPhone.v8.0.Overrides.targets')">false</WP8SDKInstalled>
    <WinRTSDKInstalled Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsXaml')">true</WinRTSDKInstalled>
    <WinRTSDKInstalled Condition="!Exists('$(MSBuildExtensionsPath)\Microsoft\WindowsXaml')">false</WinRTSDKInstalled>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <Projects>
      <Build>true</Build>
      <!-- RunFxCop is only relevant if Build also evaluates to true -->
      <RunFxCop>true</RunFxCop>
      <Sample>false</Sample>
      <BuildTargets>Build</BuildTargets>
      <BuildProperties>Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);SolutionDir=$(ProjectRoot)\;$(ExtraProperties)</BuildProperties>
      <CopyArtifacts>true</CopyArtifacts>
      <Platform>Net45</Platform>
    </Projects>
  </ItemDefinitionGroup>

  <ItemGroup>
    <!-- Platform Specific Client Projects -->
    <!-- Don't build Mono clients -->
    <Projects Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Client.Android\Microsoft.AspNet.SignalR.Client.Android.csproj">
      <Build>false</Build>
    </Projects>
    <Projects Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Client.iOS\Microsoft.AspNet.SignalR.Client.iOS.csproj">
      <Build>false</Build>
    </Projects>
    <!-- Don't copy dll's from JS project -->
    <Projects Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Client.JS\Microsoft.AspNet.SignalR.Client.JS.csproj">
      <CopyArtifacts>false</CopyArtifacts>
    </Projects>
    <!-- Only build the following clients if the SDK is installed -->
    <Projects Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Client.Silverlight5\Microsoft.AspNet.SignalR.Client.Silverlight5.csproj">
      <Build Condition="!$(Silverlight5SDKInstalled)">false</Build>
      <Platform>SL5</Platform>
      <!-- HttpClient causes issues with running FxCop on the SL5 and WP8 clients -->
      <RunFxCop>false</RunFxCop>
    </Projects>
    <Projects Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Client.WP8\Microsoft.AspNet.SignalR.Client.WP8.csproj">
      <Build Condition="!$(WP8SDKInstalled)">false</Build>
      <Platform>WP8</Platform>
      <RunFxCop>false</RunFxCop>
    </Projects>
    <Projects Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Client.WinRT\Microsoft.AspNet.SignalR.Client.WinRT.csproj">
      <Build Condition="!$(WinRTSDKInstalled)">false</Build>
      <Platform>WinRT</Platform>
    </Projects>
    <!-- The SignalR .NET client is the only remaining project that targets .NET 4.0 starting in SignalR 2.0 -->
    <Projects Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Client\Microsoft.AspNet.SignalR.Client.csproj">
      <Platform>Net40</Platform>
    </Projects>

    <!-- Projects with RunFxCop analysis disabled -->
    <Projects Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Crank\Microsoft.AspNet.SignalR.Crank.csproj">
      <CopyArtifacts>false</CopyArtifacts>
      <RunFxCop>false</RunFxCop>
    </Projects>
    <Projects Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Stress\Microsoft.AspNet.SignalR.Stress.csproj">
      <CopyArtifacts>false</CopyArtifacts>
      <RunFxCop>false</RunFxCop>
      <!-- InternalsVisibleTo("Microsoft.AspNet.SignalR.Tests.Common, PublicKey=...") is broken in the wsr-teamcity build and Stress depends on Tests.Common -->
      <Build Condition="'$(KeyFile)' != ''">false</Build>
    </Projects>

    <!-- Add any src projects that have not been defined manually -->
    <Projects Include="$(ProjectRoot)\src\**\*.csproj" Exclude="@(Projects)" />

    <!-- Custom sample projects -->
    <Projects Include="$(ProjectRoot)\samples\Microsoft.AspNet.SignalR.Client.Silverlight5.Samples\Microsoft.AspNet.SignalR.Client.Silverlight5.Samples.csproj">
      <Build Condition="$(Silverlight5SDKInstalled) != 'true'">false</Build>
      <Sample>true</Sample>
      <Platform>SL5</Platform>
    </Projects>
    <Projects Include="$(ProjectRoot)\samples\Microsoft.AspNet.SignalR.Client.WP8.Samples\Microsoft.AspNet.SignalR.Client.WP8.Samples.csproj">
      <Build Condition="$(WP8SDKInstalled) != 'true'">false</Build>
      <Sample>true</Sample>
      <Platform>WP8</Platform>
    </Projects>

    <!-- Asp.Net sample projects -->
    <Projects Include="$(ProjectRoot)\samples\Microsoft.AspNet.SignalR.LoadTestHarness\Microsoft.AspNet.SignalR.LoadTestHarness.csproj;
                       $(ProjectRoot)\samples\Microsoft.AspNet.SignalR.Samples\Microsoft.AspNet.SignalR.Samples.csproj">
      <!-- If the Build target isn't run first, package restore will fail -->
      <BuildTargets>Build;pipelinePreDeployCopyAllFilesToOneFolder</BuildTargets>
      <BuildProperties>Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);SolutionDir=$(ProjectRoot)\;$(ExtraProperties);_PackageTempDir=$(ProjectArtifactsDir)\%(FileName);AutoParameterizationWebConfigConnectionStrings=false;MSBuildCommunityTasksPath=$(MSBuildCommunityTasksPath)</BuildProperties>
      <Sample>true</Sample>
    </Projects>

    <!-- Add any sample projects that have not been defined manually -->
    <Projects Include="$(ProjectRoot)\sample\**\*.csproj" Exclude="@(Projects)">
      <Sample>true</Sample>
    </Projects>
  </ItemGroup>

  <ItemGroup>
    <UnitTestProjects Include="$(ProjectRoot)\tests\Microsoft.AspNet.SignalR.Tests\Microsoft.AspNet.SignalR.Tests.csproj"></UnitTestProjects>
    <UnitTestProjects Include="$(ProjectRoot)\tests\Microsoft.AspNet.SignalR.SqlServer.Tests\Microsoft.AspNet.SignalR.SqlServer.Tests.csproj"></UnitTestProjects>
  </ItemGroup>

  <ItemGroup>
    <JsTestProjects Include="$(ProjectRoot)\tests\Microsoft.AspNet.SignalR.Client.JS.Tests\Microsoft.AspNet.SignalR.Client.JS.Tests.csproj"></JsTestProjects>
  </ItemGroup>

  <ItemGroup>
    <FunctionalTestProjects Include="@(UnitTestProjects)"></FunctionalTestProjects>
    <FunctionalTestProjects Include="$(ProjectRoot)\tests\Microsoft.AspNet.SignalR.FunctionalTests\Microsoft.AspNet.SignalR.FunctionalTests.csproj"></FunctionalTestProjects>
  </ItemGroup>

  <ItemGroup>
    <RegexTransform Include="$(ProjectRoot)\src\Common\CommonVersionInfo.cs">
      <Find>AssemblyVersion\("\d+\.\d+\.\d+"\)</Find>
      <ReplaceWith>AssemblyVersion("$(AssemblyVersion)")</ReplaceWith>
    </RegexTransform>
    <RegexTransform Include="$(ProjectRoot)\src\Common\CommonVersionInfo.cs">
      <Find>AssemblyInformationalVersion\("\d+\.\d+\.\d+(-\w+\d*(-\d+)?)?"\)</Find>
      <ReplaceWith>AssemblyInformationalVersion("$(PackageVersion)")</ReplaceWith>
    </RegexTransform>
    <RegexTransform Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Client\Connection.cs">
      <Find>_assemblyVersion = new Version\("\d+\.\d+\.\d+"\)</Find>
      <ReplaceWith>_assemblyVersion = new Version("$(AssemblyVersion)")</ReplaceWith>
    </RegexTransform>
    <RegexTransform Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Client.JS\jquery.signalR.core.js">
      <Find>SignalR JavaScript Library v\d+\.\d+\.\d+(-\w+\d*(-\d+)?)?</Find>
      <ReplaceWith>SignalR JavaScript Library v$(PackageVersion)</ReplaceWith>
    </RegexTransform>
    <RegexTransform Include="$(ProjectRoot)\src\Microsoft.AspNet.SignalR.Core\Scripts\hubs.js">
      <Find>SignalR JavaScript Library v\d+\.\d+\.\d+(-\w+\d*(-\d+)?)?</Find>
      <ReplaceWith>SignalR JavaScript Library v$(PackageVersion)</ReplaceWith>
    </RegexTransform>
  </ItemGroup>

  <Target Name="UpdateVersion">
    <RegexTransform Items="@(RegexTransform)" />
  </Target>

  <UsingTask AssemblyFile="$(XunitPath)xunit.runner.msbuild.dll"
             TaskName="Xunit.Runner.MSBuild.xunit" />

  <Target Name="CI" DependsOnTargets="RunCodeAnalysis; Build; CopyArtifacts; RunUnitTests;">
  </Target>

  <Target Name="FunctionalCI" DependsOnTargets="RunCodeAnalysis; Build; CopyArtifacts; RunTests; AnalyzeLogs;">
  </Target>

  <Target Name="Go" DependsOnTargets="RunCodeAnalysis; Build; CopyArtifacts; RunTests;">
  </Target>

  <Target Name="GoMono" DependsOnTargets="Build;">
  </Target>

  <Target Name="BuildCmd" DependsOnTargets="RunCodeAnalysis; Build; CopyArtifacts; RunUnitTests;">
  </Target>

  <Target Name="BuildNetUnitTests" DependsOnTargets="CreateOutputDirs">
    <MSBuild Projects="%(UnitTestProjects.Identity)"
             Targets="Build"
             Properties="Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);SolutionDir=$(ProjectRoot)\;$(ExtraProperties);"
             Condition=" '$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="BuildNetFunctionalTests" DependsOnTargets="CreateOutputDirs">
    <MSBuild Projects="%(FunctionalTestProjects.Identity)"
             Targets="Build"
             Properties="Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);SolutionDir=$(ProjectRoot)\;$(ExtraProperties)"
             Condition=" '$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="AnalyzeLogs" DependsOnTargets="RunFunctionalTests">
    <Exec Command='powershell -NoProfile -ExecutionPolicy Bypass $(ProjectRoot)\build\AnalyzeLogs.ps1 "$(ProjectArtifactsDir)"' ContinueOnError="true" />
  </Target>

  <Target Name="RunUnitTests" DependsOnTargets="BuildNetUnitTests">
    <MSBuild Projects="%(JsTestProjects.Identity)"
         Targets="pipelinePreDeployCopyAllFilesToOneFolder"
         Properties="Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);SolutionDir=$(ProjectRoot)\;$(ExtraProperties);_PackageTempDir=$(JSTestsPath);AutoParameterizationWebConfigConnectionStrings=false;MSBuildCommunityTasksPath=$(MSBuildCommunityTasksPath)"
         Condition=" '$(OS)' == 'Windows_NT'"/>

    <!-- Replaces files for -->
    <FileUpdate Files="$(JSTestsPath)\default.html" Regex="&lt;!-- ##SIGNALRHUBS## --&gt;((.|\r|\n)*?)&lt;!-- ##SIGNALRHUBS## --&gt;" ReplacementText="&lt;!-- ##SIGNALRHUBS## --&gt;&lt;script type='text/javascript' src='/signalr/js'&gt;&lt;/script&gt;&lt;!-- ##SIGNALRHUBS## --&gt;"  Condition=" '$(OS)' == 'Windows_NT'" />
    <FileUpdate Files="$(JSTestsPath)\default.html" Regex="&lt;!-- ##SIGNALRHUBS## --&gt;((.|\r|\n)*?)&lt;!-- ##SIGNALRHUBS## --&gt;" ReplacementText="&lt;!-- ##SIGNALRHUBS## --&gt;&lt;script type='text/javascript' src='$(JSTestsURL)signalr/js'&gt;&lt;/script&gt;&lt;!-- ##SIGNALRHUBS## --&gt;" Condition=" '$(OS)' == 'Windows_NT'" />
    <FileUpdate Files="$(JSTestsPath)\Build\test.config.js" Regex="/\*URL\*/(.*?)/\*URL\*/" ReplacementText="/*URL*/'$(JSTestsURL)'/*URL*/" Condition=" '$(OS)' == 'Windows_NT'" />
    <FileUpdate Files="$(JSTestsPath)\Build\test.config.js" Regex="/\*CMDLineTest\*/(.*?)/\*CMDLineTest\*/" ReplacementText="/*CMDLineTest*/true/*CMDLineTest*/" Condition=" '$(OS)' == 'Windows_NT'" />

    <StartIISTask HostLocation="$(JSTestsPath)" Condition=" '$(OS)' == 'Windows_NT'" />

    <!-- Debugging is required in order to pump data from phantomjs to TeamCity -->
    <Exec Command="&quot;$(ChutzpahExePath)&quot; &quot;$(JSTester)&quot; /silent /debug /timeoutMilliseconds 30000" Condition=" '$(OS)' == 'Windows_NT'" />

    <xunit Assembly="$(ProjectArtifactsDir)\Microsoft.AspNet.SignalR.Tests\Microsoft.AspNet.SignalR.Tests.dll"
           Xml="$(TestResultsPath)\Microsoft.AspNet.SignalR.Tests.XunitResults.xml"
           Verbose="true" />

    <xunit Assembly="$(ProjectArtifactsDir)\Microsoft.AspNet.SignalR.SqlServer.Tests\Microsoft.AspNet.SignalR.SqlServer.Tests.dll"
           Xml="$(TestResultsPath)\Microsoft.AspNet.SignalR.SqlServer.Tests.XunitResults.xml"
           Verbose="true" />

    <CallTarget Targets="KillIISExpress" Condition=" '$(OS)' == 'Windows_NT'" />
    <OnError ExecuteTargets="KillIISExpress" Condition=" '$(OS)' == 'Windows_NT'" />
  </Target>

  <Target Name="RunFunctionalTests" DependsOnTargets="BuildNetFunctionalTests">
    <xunit Assembly="$(ProjectArtifactsDir)\Microsoft.AspNet.SignalR.FunctionalTests\bin\Microsoft.AspNet.SignalR.FunctionalTests.dll"
           Xml="$(TestResultsPath)\Microsoft.AspNet.SignalR.FunctionalTests.XunitResults.xml"
           Verbose="true" />

    <CallTarget Targets="KillIISExpress" />
    <OnError ExecuteTargets="KillIISExpress" />
  </Target>

  <Target Name="TestSwarm" Condition="$(TestSwarmPostData) != ''">
    <HttpPostRequest Url="http://testswarm.cloudapp.net/api.php?action=addjob"
                     Data="$(TestSwarmPostData)" />
  </Target>

  <Target Name="KillIISExpress">
    <Exec Command="taskkill /IM iisexpress.exe /F" ContinueOnError="true" />
  </Target>

  <Target Name="RunTests" DependsOnTargets="RunUnitTests; RunFunctionalTests;">
  </Target>

  <Target Name="CreateOutputDirs">
    <RemoveDir Directories="$(ArtifactsDir)" Condition="Exists('$(ArtifactsDir)')" ContinueOnError="true" />
    <MakeDir Directories="$(ArtifactsDir)" Condition="!Exists('$(ArtifactsDir)')" />
    <MakeDir Directories="$(TestResultsPath)" Condition="!Exists('$(TestResultsPath)')" />
    <MakeDir Directories="$(DocsPath)" Condition="!Exists('$(DocsPath)')" />
  </Target>

  <Target Name="Build" DependsOnTargets="CreateOutputDirs">
    <MSBuild Projects="@(Projects)"
             Targets="%(BuildTargets)"
             Properties="%(BuildProperties)"
             Condition="%(Build) And '$(OS)' == 'Windows_NT'"/>

    <MSBuild Projects="$(ProjectRoot)\Microsoft.AspNet.SignalR.Mono.sln"
             Properties="Configuration=$(Configuration);ArtifactsDir=$(ProjectArtifactsDir);$(ExtraProperties)"
             Condition=" '$(OS)' != 'Windows_NT'" />
  </Target>

  <Target Name="CopyArtifacts" DependsOnTargets="Build">
    <ItemGroup>
      <!-- Copy remaining package artifacts to artifacts/{Configuration}/package-src/{Platform}/ -->
      <Artifacts Include="$(ProjectArtifactsDir)\%(Projects.FileName)\Microsoft.AspNet.SignalR.*.dll;
                          $(ProjectArtifactsDir)\%(Projects.FileName)\Microsoft.AspNet.SignalR.*.pdb;
                          $(ProjectArtifactsDir)\%(Projects.FileName)\Microsoft.AspNet.SignalR.*.xml"
                 Condition="%(Projects.CopyArtifacts) And !%(Projects.Sample)">
        <Destination>$(PackageSrcDir)\%(Projects.Platform)</Destination>
      </Artifacts>
      <!-- Copy exe's to artifacts/{Configuration}/package-src/tools/ -->
      <Artifacts Include="$(ProjectArtifactsDir)\%(Projects.FileName)\*.exe"
                 Condition="%(Projects.CopyArtifacts) And !%(Projects.Sample)">
        <Destination>$(PackageSrcDir)\Tools</Destination>
      </Artifacts>
      <!-- Copy combined/minified JS and sql scripts to artifacts/{Configuration}/package-src/Content/ -->
      <Artifacts Include="$(ProjectArtifactsDir)\Microsoft.AspNet.SignalR.Client.JS\*.js;
                          $(ProjectArtifactsDir)\Microsoft.AspNet.SignalR.SqlServer\install.sql">
        <Destination>$(PackageSrcDir)\Content</Destination>
      </Artifacts>
      <!-- Copy samples to artifacts/{Configuration}/samples while keeping directory structure -->
      <Artifacts Include="$(ProjectArtifactsDir)\%(Projects.FileName)\**\*.*" Condition="%(Projects.Sample)">
        <Destination>$(SamplesDir)\%(Projects.FileName)</Destination>
      </Artifacts>
      <!-- Copy nuspecs to artifacts/nuspecs -->
      <Artifacts Include="$(NuspecsSource)\*.nuspec">
        <Destination>$(NuspecsDestination)</Destination>
      </Artifacts>
    </ItemGroup>

    <Copy SourceFiles="@(Artifacts)" DestinationFiles="%(Destination)\%(RecursiveDir)%(Filename)%(Extension)" Condition="Exists('%(Identity)')"/>
  </Target>

  <Target Name="RunCodeAnalysis" DependsOnTargets="CreateOutputDirs" Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v11.0\CodeAnalysis\fxcoptask.dll')">
    <ItemGroup>
      <ProjectsToAnalyze Include="@(Projects)" Condition="%(Build) And %(RunFxCop) And !%(Sample)">
        <BuildProperties>%(BuildProperties);RunCodeAnalysis=true</BuildProperties>
      </ProjectsToAnalyze>
    </ItemGroup>
    
    <!-- If the normal Build target is run, FxCop will ignore suppressions -->
    <MSBuild Projects="@(ProjectsToAnalyze)"
             Targets="Rebuild"
             Properties="%(BuildProperties)" />

    <!-- Copy logs to FxCopDir so they are not overwritten -->
    <ItemGroup>
      <AnalysisLogs Include="$(ProjectArtifactsDir)\%(Projects.FileName)\*.CodeAnalysisLog.xml">
        <Destination>$(FxCopDir)\%(Platform)</Destination>
      </AnalysisLogs>
    </ItemGroup>
    <Copy SourceFiles="@(AnalysisLogs)" DestinationFolder="%(Destination)" />
  </Target>

  <!-- Required to restore solution-level packages -->
  <Import Project="$(ProjectRoot)\.nuget\nuget.targets" />

  <Target Name="PrepareCodeCoverage">
    <!-- Restore solution-level packages -->
    <Exec Command='$(NuGetCommand) install "$([System.IO.Path]::Combine($(NuGetToolsPath), "packages.config"))" -source "$(PackageSources)" -o "$(PackagesDir)"' />
  </Target>

  <Target Name="UnitCodeCoverage" DependsOnTargets="PrepareCodeCoverage; BuildNetUnitTests">
    <MSBuild Projects="Microsoft.AspNet.SignalR.OpenCover.targets"
             Properties="ArtifactsDir=$(ArtifactsDir);SolutionDir=$(ProjectRoot)\;XunitArgs=Microsoft.AspNet.SignalR.Tests\Microsoft.AspNet.SignalR.Tests.dll /noshadow"
             Condition="'$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="FunctionalCodeCoverage" DependsOnTargets="PrepareCodeCoverage; BuildNetFunctionalTests">
    <MSBuild Projects="Microsoft.AspNet.SignalR.OpenCover.targets"
             Properties="ArtifactsDir=$(ArtifactsDir);SolutionDir=$(ProjectRoot)\;XunitArgs=Microsoft.AspNet.SignalR.FunctionalTests\bin\Microsoft.AspNet.SignalR.FunctionalTests.dll /noshadow"
             Condition="'$(OS)' == 'Windows_NT'"/>
  </Target>

  <Target Name="CodeCoverage" DependsOnTargets="PrepareCodeCoverage; BuildNetUnitTests; BuildNetFunctionalTests">
    <Copy SourceFiles="$(ProjectRoot)\build\Microsoft.AspNet.SignalR.OpenCover.xunit" DestinationFolder="$(ArtifactsDir)" />
    <MSBuild Projects="Microsoft.AspNet.SignalR.OpenCover.targets"
             Properties="ArtifactsDir=$(ArtifactsDir);SolutionDir=$(ProjectRoot)\;XunitArgs=$(ArtifactsDir)\Microsoft.AspNet.SignalR.OpenCover.xunit"
             Condition="'$(OS)' == 'Windows_NT'"/>
  </Target>
</Project>